# Core rules are here like IP and Session tracking. 
# These rules are identified by 33XXX integer.

# Initiate IP spesific storage
SecAction id:33050,phase:1,nolog,pass,initcol:IP=%{REMOTE_ADDR}

#DEBUG, resets everything
SecRule REQUEST_HEADERS:User-Agent "reset" \
	"id:33055,\
	phase:1,\
	pass,\
	skipAfter:33074,\
	tag:debug,\
	setvar:!IP.threshold_time,\
	setvar:!IP.init_time,\
	setvar:!IP.counter,\
	setvar:!IP.blocked"

# Block when IP is set to blocked 
SecRule IP:blocked "@eq 1" \
	"id:33060,\
	phase:1,\
	block"

# Accumulate IP counter value, also sets counter to expire in 1 minute.
# IP counter can be seen as count of requests per minute.
SecAction "id:33061,\
		phase:1,\
		pass,\
		setvar:IP.counter=+1,\
		expirevar:IP.counter=60"

# Set init time and threshold time that are used later.
# Threshold is 1 minute. Timeout the variables in 1 minute.
SecRule IP:counter "@eq 1" \
	"id:33062,\
	phase:1,\
	pass,\
	setvar:IP.init_time=%{TIME_EPOCH},\
	expirevar:IP.init_time=60,\
	setvar:IP.threshold_time=%{TIME_EPOCH},\
	setvar:IP.threshold_time=+60,\
	expirevar:IP.threshold_time=60"

# Debug message
SecAction "id:33063,\
	phase:1,\
	pass,\
	tag:debug,\
	msg:'ip threshold_time %{IP.threshold_time} inittime: %{IP.init_time}'"

# If there's over 50 requests per minute then set a 
# block flag to indicate this. The IP counter is also
# reset since it is no longer relevant.
# Change: expirevar to 3600
SecRule IP:counter "@ge %{TX.requestsperminute}" \
    "id:33064,\
	phase:1,\
	pass,\
	setvar:IP.blocked=1,\
	expirevar:IP.blocked=%{TX.blockfor},\
	setvar:IP.counter=0"

# Check if 60 seconds have passed since the initiation,
# If yes then reset the counter.
SecRule IP:threshold_time "@lt %{TIME_EPOCH}" \
	"id:33065,\
	phase:1,\
	pass,\
	setvar:IP.counter=0,\
	setvar:!IP.threshold_time,\
	setvar:!IP.init_time"

# DEBUG
# Print IP counter
SecAction "id:33070,\
	phase:1,\
	pass,\
	tag:debug,\
	msg:'ip counter: %{IP.counter}'"

# Block requests that do not start with the body-tag,
# because such messages are not allowed by the Bosh
# specification. This rule is constructed so that if 
# there is a a body tag, then the block action is skipped.
# It has better performance than 'does-not-contain' regex.
SecRule STREAM_INPUT_BODY "@rx ^<body" \
	"id:33075,\
	phase:2,\
	pass,\
	skipAfter:33076,\
	msg:'Found body'"

# Blocks only when a request doesn't have a body-tag
SecAction "id:33076,\
	phase:2,\
	deny,\
	msg:'No body, blocked'"

# Initiate session
SecRule STREAM_INPUT_BODY "@rx sid='(.+?)'" \
	"id:33080,\
	capture,\
	phase:2,\
	pass,\
	t:lowercase,\
	msg:'sid=%{TX.1}',\
	setsid:%{TX.1},\
	setvar:SESSION.TIMEOUT=172800"

# Get request ID which is in body-tag's rid attribute
SecRule STREAM_INPUT_BODY "@rx rid='(.+?)'" \
	"id:33082,\
	capture,\
	phase:2,\
	pass,\
	t:lowercase,\
	setvar:SESSION.rid=%{TX.1},\
	msg:'rid=%{TX.1}'"

# When a new session is created set a variable to indicate it
# and also set request id. We can use TX.1 here because it still
# holds the captured value for rid. Also skips the next action
# which increments the rid value. 
SecRule SESSION:IS_NEW "@eq 1" \
	"id:33083,\
	pass,\
	phase:2,\
	setvar:SESSION.started=1,\
	setvar:SESSION.rid=%{TX.1},\
	setvar:SESSION.rid_sub=0,\
	msg:'session started',\
	skip:1"

# This keeps track of where the request id should be according to
# the rids in the requests. When we have to block a request from 
# the client we send an empty body that does not have a rid but the
# client increments its own rid count. These get desynched with the 
# server hence the tracking. The "correct" rid is inserted by the WAF
SecRule SESSION:rid_sub "!@eq 0" \
	"id:33084,\
	pass,\
	phase:2,\
	setvar:SESSION.rid=-%{SESSION.rid_sub},\
	chain"
	SecRule STREAM_INPUT_BODY "@rsub s/rid='[0-9]*'/rid='%{SESSION.rid}'/d" 

# Change wait attribute to 0 
# For testing purposes
SecRule STREAM_INPUT_BODY "@rx wait='" \
	"id:33085,\
	phase:2,\
	pass,\
	t:lowercase,\
	tag:testing,\
	chain"
	SecRule STREAM_INPUT_BODY "@rsub s/wait='[0-9]*'/ wait='0'/"

# Change hold attribute to 0 
# For testing purposes
SecRule STREAM_INPUT_BODY "@rx hold='" \
	"id:33086,\
	phase:2,\
	pass,\
	t:lowercase,\
	tag:testing,\
	chain"
	SecRule STREAM_INPUT_BODY "@rsub s/hold='[0-9]*'/ hold='0'/"

# DEBUG Print session counter
SecAction \
	"id:33090,\
	phase:2,\
	pass,\
	tag:debug,\
	setvar:SESSION.count=+1,\
	msg:'session counter=%{SESSION.count}'"


# Do not offer compression because they can be used to for XMPPbomb and also
# WAF cannot read compressed data without decompression
# Bosh data should be compressed on HTTP-Level 
SecRule STREAM_OUTPUT_BODY "@rx <compression" \
	"id:33095,\
	phase:4,\
	pass,\
	t:none,\
	chain"
	SecRule STREAM_OUTPUT_BODY "@rsub s/<compression.*\/compression>/|0x20|/d"

# If the client asks for compression whether it was offered or not we have to
# intercept the request and return an empty body request. This rule also 
# invokes rule 33098 which alter the response. The response tells the client
# that the requested compression method is not supported. 
SecRule STREAM_INPUT_BODY "@rx <compress " \
	"id:33096,\
	phase:2,\
	pass,\
	skip:1,\
	setvar:SESSION.rid_sub=+1,\
	chain"
	SecRule STREAM_INPUT_BODY "@rsub s/<body.+\/.*>/<body \
sid='%{SESSIONID}' \
xmlns:stream='http:\/\/etherx.jabber.org\/streams' \
xmlns='http:\/\/jabber.org\/protocol\/httpbind'><\/body>/d"
	

# This gets skipped if the above rule matches. This removes the next rule.
# This is one of the ways of ModSecurity to make if-else statements.
SecAction \
	"id:33097,\
	phase:2,\
	pass,\
	ctl:ruleRemoveById=33098" 

# Return failure if client requests compression
SecRule STREAM_OUTPUT_BODY "@rsub s/<body.+\/.*>/<body sid='%{SESSIONID}'>\
<failure xmlns='http:\/\/jabber.org\/protocol\/compress'>\
<unsupported-method\/>\
<\/failure>\
<\/body>/d"\
	"id:33098,\
	phase:4,\
	pass"


#Resets SESSION persistent storage
SecRule REQUEST_HEADERS:User-Agent "reset" \
	"id:33100,\
	phase:2,\
	pass,\
	tag:debug,\
	setvar:SESSION.TIMEOUT=0,\
	msg:'%{SESSIONID}'"

